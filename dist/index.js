/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
import express from "express";
const port = 3000;
const app = express();
app.use(express.json());
let toDos = [];
let i = 0;
app.get("/todos", (req, res) => {
    res.status(200).json({ toDos });
});
app.post("/todos", (req, res) => {
    const random = Math.floor(Math.random() * 1000);
    const iD = random.toString() + i.toString();
    req.body.id = iD;
    i++;
    toDos.push(req.body);
    res.status(201).json({ msg: "Created with ID: " + iD.toString() });
});
app.get("/todos/:id", (req, res) => {
    let tid = req.params.id;
    // let foundTodo:any = {};
    let i = 0;
    for (; i < toDos.length; i++) {
        let check = toDos[i].id;
        if (check === tid) {
            res.status(200).json(toDos[i]);
            break;
        }
    }
    if (i == toDos.length) {
        res.status(404).json({ msg: "ToDo Not Found" });
    }
});
app.put("/todos/:tid", (req, res) => {
    const tid = req.params.tid;
    const label = req.body;
    for (let i = 0; i < toDos.length; i++) {
        if (toDos[i].id === tid) {
            toDos[i] = label;
            toDos[i].id = tid;
            res.status(200).json({ msg: "Edited successfully!!" });
        }
    }
    res.status(404).json({ msg: "ToDo Not Found" });
});
app.delete("/todos/:tid", (req, res) => {
    const tid = req.params.tid;
    const arr = [];
    let count = 0;
    for (let i = 0; i < toDos.length; i++) {
        if (toDos[i].id != tid) {
            arr.push(toDos[i]);
        }
        if (toDos[i].id === tid) {
            count++;
        }
    }
    if (count != 0) {
        toDos = arr;
        res.status(200).json({ msg: "Deleted successfully!!" });
    }
    else {
        res.status(404).json({ msg: "ToDo Not Found" });
    }
});
// app.get("/:else",(req:any,res:any)=>{
//  const gibrish=req.params.else;
//  if(gibrish!="todos")
//  res.status(404).json({msg:"Page not found!!"});
// })
// app.get("/todos/:tid/:else",(req:any,res:any)=>{
//  const gibrish=req.params.else;
//  if(gibrish)
//  res.status(404).json({msg:"Page not found!!"});
// })
app.use((req, res) => {
    res.status(404).json({ msg: "404 Page not Found" });
});
app.listen(port);
